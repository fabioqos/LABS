#!/usr/bin/groovy

String SlackChannel = 'city_pipeline'

node (''){
    env.OCP_API_SERVER = "${env.OPENSHIFT_API_URL}"
    env.OCP_TOKEN = readFile('/var/run/secrets/kubernetes.io/serviceaccount/token').trim()
}

node('') {
    stage('SCM Checkout')
    {
      checkout scm
    }

    slackSend channel: SlackChannel, color: "#439FE0", message: "@channel - Build started. ${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME}"

    stage('Build Image') {
      sh "oc start-build ${env.APP_NAME} --from-dir=. --follow"
    }

    stage ('Security Scanning')
    {
      echo 'Security Scanning... please wait'
      sleep 1
    }

    stage ('Deploy to Dev') {
      openshiftTag (apiURL: ApiServer, authToken: ApiToken, destStream: "${env.APP_NAME}", destTag: 'latest', destinationAuthToken: ApiToken, destinationNamespace: "${env.NAMESPACE_DEV}", namespace: "${env.NAMESPACE_BUILD}", srcStream: "${env.APP_NAME}", srcTag: 'latest')

      openshiftVerifyDeployment (apiURL: ApiServer, authToken: ApiToken, depCfg: "${env.APP_NAME}", namespace: "${env.NAMESPACE_DEV}", verifyReplicaCount: true)
    }

    stage ('Deploy to Test') {
      openshiftTag (apiURL: ApiServer, authToken: ApiToken, destStream: "${env.APP_NAME}", destTag: 'latest', destinationAuthToken: ApiToken, destinationNamespace: "${env.NAMESPACE_TEST}", namespace: "${env.NAMESPACE_DEV}", srcStream: "${env.APP_NAME}", srcTag: 'latest')
      openshiftVerifyDeployment (apiURL: ApiServer, authToken: ApiToken, depCfg: "${env.APP_NAME}", namespace: "${env.NAMESPACE_TEST}", verifyReplicaCount: true)
    }

    stage ('Automated Tests')
    {
      echo 'Running automated tests.' 
      sleep 2
      echo 'All good here!'
    }

    stage ('Deploy to Production') {
      openshiftTag (apiURL: ApiServer, authToken: ApiToken, destStream: "${env.APP_NAME}", destTag: 'latest', destinationAuthToken: ApiToken, destinationNamespace: "${env.NAMESPACE_PROD}", namespace: "${env.NAMESPACE_TEST}", srcStream: "${env.APP_NAME}", srcTag: 'latest')
      openshiftVerifyDeployment (apiURL: ApiServer, authToken: ApiToken, depCfg: "${env.APP_NAME}", namespace: "${env.NAMESPACE_PROD}", verifyReplicaCount: true)
    }
}
